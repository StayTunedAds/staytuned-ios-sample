// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StayTunedSDK
import AVKit
import CoreData
import Foundation
import MediaPlayer
import MobileCoreServices
import Swift
import SystemConfiguration
import UIKit
public struct STContentTransaction {
  public let audioItem: StayTunedSDK.STContent
  public let paymentType: Swift.String?
  public let amount: Swift.Int
  public let currency: Swift.String?
  public let status: Swift.String?
  public let createdAt: Swift.String?
}
public struct STTrackTransaction {
  public let audioItem: StayTunedSDK.STTrack
  public let paymentType: Swift.String?
  public let amount: Swift.Int
  public let currency: Swift.String?
  public let status: Swift.String?
  public let createdAt: Swift.String?
}
extension String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
@_hasMissingDesignatedInitializers final public class STPlayer {
  final public var currentList: StayTunedSDK.STPlaylist? {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($currentTrack) final public var currentTrack: StayTunedSDK.STTrack? {
    get
  }
  final public var $currentTrack: StayTunedSDK.Observable<StayTunedSDK.STTrack?> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($currentContent) final public var currentContent: StayTunedSDK.STContent? {
    get
  }
  final public var $currentContent: StayTunedSDK.Observable<StayTunedSDK.STContent?> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($currentTime) final public var currentTime: Swift.Double? {
    get
  }
  final public var $currentTime: StayTunedSDK.Observable<Swift.Double?> {
    get
  }
  final public var currentState: StayTunedSDK.STPlayerState {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($rate) final public var rate: Swift.Float {
    get
  }
  final public var $rate: StayTunedSDK.Observable<Swift.Float> {
    get
  }
  final public var configuration: StayTunedSDK.STPlayerConfiguration? {
    get
  }
  final public var timerRemainingDuration: Foundation.TimeInterval? {
    get
  }
  @objc deinit
}
extension STPlayer {
  final public func resume()
}
extension STPlayer : StayTunedSDK.STObservableProtocol {
  final public func add(observer: StayTunedSDK.STPlayerObserver)
  final public func remove(observer: StayTunedSDK.STPlayerObserver)
  public typealias Observer = StayTunedSDK.STPlayerObserver
}
@_hasMissingDesignatedInitializers final public class STWishList : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STWishList
  @StayTunedSDK.Observable @_projectedValueProperty($contents) final public var contents: [StayTunedSDK.STContentWish] {
    get
    set
    _modify
  }
  final public var $contents: StayTunedSDK.Observable<[StayTunedSDK.STContentWish]> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($tracks) final public var tracks: [StayTunedSDK.STTrackWish] {
    get
    set
    _modify
  }
  final public var $tracks: StayTunedSDK.Observable<[StayTunedSDK.STTrackWish]> {
    get
  }
  final public func add(content: StayTunedSDK.STContentWish)
  final public func add(track: StayTunedSDK.STTrackWish)
  final public func remove(content: StayTunedSDK.STContentWish)
  final public func remove(track: StayTunedSDK.STTrackWish)
  @objc deinit
}
public enum STPodcastDescriptionIdentityModels {
  public struct Style {
  }
  public struct ContentData {
  }
}
public enum STListLinkedContentType : Swift.String {
  case content
  case track
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol STListProtocol {
  var id: Swift.Int? { get }
  var name: Swift.String? { get set }
  var type: StayTunedSDK.STListType? { get set }
  var imgSrc: Swift.String? { get set }
  var linkedContentType: StayTunedSDK.STListLinkedContentType? { get }
  var numberOfItems: Swift.Int? { get }
  var createdAt: Foundation.Date? { get }
  var updatedAt: Foundation.Date? { get }
  func delete(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func getItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func update(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func syncItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
}
public struct STList<Item> : StayTunedSDK.STListProtocol {
  public var id: Swift.Int? {
    get
  }
  public var name: Swift.String? {
    get
    set
  }
  public var type: StayTunedSDK.STListType? {
    get
    set
  }
  public var imgSrc: Swift.String? {
    get
    set
  }
  public var linkedContentType: StayTunedSDK.STListLinkedContentType? {
    get
  }
  public var numberOfItems: Swift.Int? {
    get
  }
  public var items: [StayTunedSDK.STListItem<Item>] {
    get
    set
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var updatedAt: Foundation.Date? {
    get
  }
}
extension STList {
  public func delete(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func getItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func update(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func updateItems(_ items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func updateItem(_ item: StayTunedSDK.STListItem<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func addItems(_ items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func addItem(_ item: StayTunedSDK.STListItem<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func deleteItems(_ items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func deleteItem(_ item: StayTunedSDK.STListItem<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func syncItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
}
extension STList : StayTunedSDK.STObservableProtocol {
  public func add(observer: StayTunedSDK.STListObserver)
  public func remove(observer: StayTunedSDK.STListObserver)
  public typealias Observer = StayTunedSDK.STListObserver
}
public protocol STListObserver : AnyObject {
  func itemsDidChange<Item>(to value: [StayTunedSDK.STListItem<Item>])
}
public struct STContentLightOfflineItem {
  public let audioItem: StayTunedSDK.STContentLight
  public var state: StayTunedSDK.STOfflineState
}
public struct STListItem<Item> {
  public var id: Swift.Int?
  public var key: Swift.String?
  public var item: Item?
  public var order: Swift.Int?
  public var value: Swift.String?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
}
extension STListItem : Swift.Equatable {
  public static func == (lhs: StayTunedSDK.STListItem<Item>, rhs: StayTunedSDK.STListItem<Item>) -> Swift.Bool
}
extension STListItem {
  public static func defaultOrder(lhs: StayTunedSDK.STListItem<Item>, rhs: StayTunedSDK.STListItem<Item>) -> Swift.Bool
}
extension STListItem where Item == StayTunedSDK.STTrack {
  public init(track: StayTunedSDK.STTrack)
}
extension STListItem where Item == StayTunedSDK.STContentLight {
  public init(contentLight: StayTunedSDK.STContentLight)
}
extension STPlayer {
  public static func getInstance() throws -> StayTunedSDK.STPlayer
  final public func setConfiguration(_ configuration: StayTunedSDK.STPlayerConfiguration)
  final public func play(playlist: StayTunedSDK.STPlaylist, at index: Swift.Int)
  final public func stop()
  final public func next()
  final public func prev()
  final public func seekTo(time: Swift.Double)
  final public func fastForward()
  final public func rewind()
  final public func setStopTimer(time: Swift.Double)
  final public func setStopAtEndOfTrack()
  final public func removeStopTimer()
  final public func getAudioDuration() -> Swift.Double?
  final public func getAudioCurrentTime() -> Swift.Double?
  final public func isPlaying() -> Swift.Bool
  final public func isPaused() -> Swift.Bool
  final public func isLoading() -> Swift.Bool
}
extension STPlayer {
  final public func openExpand(presenter viewController: UIKit.UIViewController)
  @discardableResult
  final public func displayChip(in controller: UIKit.UIViewController) -> UIKit.UIView
  final public func setMiniPlayer(in viewController: UIKit.UIViewController)
  final public func displayMiniPlayer(_ value: Swift.Bool)
}
public struct STSection {
  public let id: Swift.Int
  public let name: Swift.String
  public let type: StayTunedSDK.STSectionType?
  public let linkedContentType: StayTunedSDK.STSectionLinkedContentType?
  public let order: Swift.Int?
  public let highlighted: Swift.Bool?
  public let searchable: Swift.Bool?
  public let numberOfItems: Swift.Int?
  public let imgSrc: Swift.String?
  public let landscapeImgSrc: Swift.String?
  public let linkedContents: [StayTunedSDK.STContentLight]?
  public var linkedElements: [StayTunedSDK.STTrack]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct STContentWish {
  public let id: Swift.Int
  public let audioItem: StayTunedSDK.STContent
  public let createdAt: Swift.String?
}
public struct STTrackWish {
  public let id: Swift.Int
  public let audioItem: StayTunedSDK.STTrack
  public let createdAt: Swift.String?
}
#warning("Voir ce que c'est exactement, ou et comment on s'en sert")
public struct STContentHistoryItem {
  public let audioItem: StayTunedSDK.STContent
  public var currentTime: Swift.Float
}
public struct STTrackHistoryItem {
  public let audioItem: StayTunedSDK.STTrack
  public var currentTime: Swift.Float
}
@_hasMissingDesignatedInitializers final public class STSections : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STSections
  @objc deinit
}
extension STSections {
  final public func getSections(completion: @escaping (Swift.Result<[StayTunedSDK.STSection], Swift.Error>) -> Swift.Void)
  final public func getSection(by id: Swift.Int, completion: @escaping (Swift.Result<StayTunedSDK.STSection, Swift.Error>) -> Swift.Void)
}
public enum STOfflineState : Swift.Equatable {
  case notDownloaded
  case queued
  case downloading(Swift.Float)
  case downloaded
  public static func == (a: StayTunedSDK.STOfflineState, b: StayTunedSDK.STOfflineState) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class STOffline : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STOffline
  final public var tracks: [StayTunedSDK.STTrackOfflineItem] {
    get
  }
  final public func add(track: StayTunedSDK.STTrack, completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? = nil)
  final public func remove(track: StayTunedSDK.STTrack) throws
  @objc deinit
}
extension STOffline : StayTunedSDK.STObservableProtocol {
  final public func add(observer: StayTunedSDK.STOfflineObserver)
  final public func remove(observer: StayTunedSDK.STOfflineObserver)
  public typealias Observer = StayTunedSDK.STOfflineObserver
}
public protocol STOfflineObserver : AnyObject {
  func offlineContentsDidChange(to value: [StayTunedSDK.STContentLightOfflineItem])
  func offlineTracksDidChange(to value: [StayTunedSDK.STTrackOfflineItem])
}
public enum STContentModelType : Swift.String, Swift.Codable {
  case podcast
  case audiobook
  case livestream
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STContentMediaType : Swift.String, Swift.Codable {
  case edito
  case brand
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STContentDiffusionMode : Swift.String, Swift.Codable {
  case episodic
  case serial
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STContentDisponibilityStatus : Swift.String, Swift.Codable {
  case forthcoming
  case available
  case stopped
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias STTrackList = StayTunedSDK.STList<StayTunedSDK.STTrack>
public typealias STContentList = StayTunedSDK.STList<StayTunedSDK.STContentLight>
public typealias STTrackListItem = StayTunedSDK.STListItem<StayTunedSDK.STTrack>
public typealias STContentListItem = StayTunedSDK.STListItem<StayTunedSDK.STContentLight>
public enum STTrackModelType : Swift.String, Swift.Codable {
  case track
  case livetrack
  case chapter
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STTrackTypeOfElement : Swift.String, Swift.Codable {
  case full
  case trailer
  case bonus
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class STHistory : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STHistory
  @StayTunedSDK.Observable @_projectedValueProperty($contents) final public var contents: [StayTunedSDK.STContentHistoryItem] {
    get
    set
    _modify
  }
  final public var $contents: StayTunedSDK.Observable<[StayTunedSDK.STContentHistoryItem]> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($tracks) final public var tracks: [StayTunedSDK.STTrackHistoryItem] {
    get
    set
    _modify
  }
  final public var $tracks: StayTunedSDK.Observable<[StayTunedSDK.STTrackHistoryItem]> {
    get
  }
  final public func add(content: StayTunedSDK.STContent)
  final public func add(track: StayTunedSDK.STTrack)
  @objc deinit
}
public enum STSectionLinkedContentType : Swift.String, Swift.Codable {
  case content
  case element
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STSectionType : Swift.String, Swift.Codable {
  case `default`
  case new
  case trailer
  case highlight
  case category
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol STAudioItemInterface : Swift.Equatable {
  var key: Swift.String { get }
}
extension STAudioItemInterface {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
public struct STContentLight {
  public let key: Swift.String
  public let type: StayTunedSDK.STContentModelType?
  public let title: Swift.String
  public let ean: Swift.String?
  public let imgSrc: Swift.String?
  public let portraitImgSrc: Swift.String?
  public let landscapeImgSrc: Swift.String?
  public let narrator: Swift.String?
  public let author: Swift.String?
  public let publicationDate: Foundation.Date?
  public let overallDuration: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class StayTunedSDK {
  @discardableResult
  public init(appId: Swift.String, authToken: Swift.String) throws
  public static func getInstance() throws -> StayTunedSDK.StayTunedSDK
  @objc deinit
}
final public class STPlaylist {
  final public var tracks: [StayTunedSDK.STTrack]
  final public var hasNext: Swift.Bool {
    get
  }
  final public var hasPrevious: Swift.Bool {
    get
  }
  public init(tracks: [StayTunedSDK.STTrack])
  convenience public init(content: StayTunedSDK.STContent)
  @discardableResult
  final public func next() -> StayTunedSDK.STTrack?
  @discardableResult
  final public func previous() -> StayTunedSDK.STTrack?
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
@propertyWrapper public class Observable<Value> {
  @available(*, deprecated, message: "Observation will be removed in 1.0.5. Please use delegate pattern.")
  public var projectedValue: StayTunedSDK.Observable<Value> {
    get
  }
  @available(*, deprecated, message: "Observation will be removed in 1.0.5. Please use delegate pattern.")
  public var wrappedValue: Value {
    get
    set
  }
  public init(wrappedValue: Value)
  @objc deinit
}
extension Observable {
  @discardableResult
  @available(*, deprecated, message: "Observation will be removed in 1.0.5. Please use delegate pattern.")
  public func observe(with closure: @escaping (Value) -> Swift.Void) -> StayTunedSDK.STObservable.Cancellable
}
public enum STObservable {
  @_hasMissingDesignatedInitializers final public class Cancellable {
    @objc deinit
    final public func cancel()
  }
}
@_hasMissingDesignatedInitializers final public class STAuth : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STAuth
  @objc deinit
}
extension STAuth {
  final public func connect(partnerKey: Swift.String, partnerToken: Swift.String, completion: ((Swift.Error?) -> Swift.Void)?)
  final public func refresh(completion: ((Swift.Error?) -> Swift.Void)?)
}
public protocol STUIFeatureInterface {
  func launchUI()
}
@_hasMissingDesignatedInitializers final public class STLists : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STLists
  final public func getLists(completion: @escaping (Swift.Result<[StayTunedSDK.STListProtocol], Swift.Error>) -> Swift.Void)
  final public func create<Item>(name: Swift.String, type: StayTunedSDK.STListType, completion: @escaping (Swift.Result<StayTunedSDK.STList<Item>, Swift.Error>) -> Swift.Void)
  final public func getList<Item>(by id: Swift.Int, completion: @escaping (Swift.Result<StayTunedSDK.STList<Item>, Swift.Error>) -> Swift.Void)
  final public func update<Item>(_ list: StayTunedSDK.STList<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  final public func delete(listId: Swift.Int, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  final public func updateItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<[StayTunedSDK.STListItem<Item>], Swift.Error>) -> Swift.Void)
  final public func addItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<[StayTunedSDK.STListItem<Item>], Swift.Error>) -> Swift.Void)
  final public func deleteItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<Swift.Int?, Swift.Error>) -> Swift.Void)
  final public func syncItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<[StayTunedSDK.STListItem<Item>], Swift.Error>) -> Swift.Void)
  @objc deinit
}
public struct STPlayerConfiguration {
  public var isContentCellVisible: Swift.Bool
  public var onContentCellClick: ((UIKit.UINavigationController) -> Swift.Void)?
  public init(isContentCellVisible: Swift.Bool = true, onContentCellClick: ((UIKit.UINavigationController) -> Swift.Void)? = nil)
}
public protocol STFeature {
  static func getInstance() throws -> Self
  static var shared: Self? { get }
}
extension STFeature {
  public static var shared: Self? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class STContents : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STContents
  @objc deinit
}
extension STContents {
  final public func getContent(by key: Swift.String, completion: @escaping (Swift.Result<StayTunedSDK.STContent, Swift.Error>) -> Swift.Void)
  final public func getContents(completion: @escaping (Swift.Result<[StayTunedSDK.STContentLight], Swift.Error>) -> Swift.Void)
}
public protocol STPlayerObserver : AnyObject {
  func playerCurrentTrackDidChange(to track: StayTunedSDK.STTrack)
  func playerCurrentContentDidChange(to content: StayTunedSDK.STContent)
  func playerCurrentTimeDidChange(to value: Swift.Double?)
  func playerStateDidChange(to value: StayTunedSDK.STPlayerState)
  func playerRateDidChange(to value: Swift.Float)
  func playerTimerDidChange(to value: Foundation.TimeInterval?)
  func playerTrackDidEnd(_ track: StayTunedSDK.STTrack)
  func playerFailed(for track: StayTunedSDK.STTrack)
}
@_hasMissingDesignatedInitializers final public class STBookmarked : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STBookmarked
  @StayTunedSDK.Observable @_projectedValueProperty($contents) final public var contents: [StayTunedSDK.STContent] {
    get
    set
    _modify
  }
  final public var $contents: StayTunedSDK.Observable<[StayTunedSDK.STContent]> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($tracks) final public var tracks: [StayTunedSDK.STTrack] {
    get
    set
    _modify
  }
  final public var $tracks: StayTunedSDK.Observable<[StayTunedSDK.STTrack]> {
    get
  }
  final public func add(content: StayTunedSDK.STContent)
  final public func add(track: StayTunedSDK.STTrack)
  final public func remove(content: StayTunedSDK.STContent)
  final public func remove(track: StayTunedSDK.STTrack)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class STLibrary : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STLibrary
  @StayTunedSDK.Observable @_projectedValueProperty($contents) final public var contents: [StayTunedSDK.STContentTransaction] {
    get
    set
    _modify
  }
  final public var $contents: StayTunedSDK.Observable<[StayTunedSDK.STContentTransaction]> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($tracks) final public var tracks: [StayTunedSDK.STTrackTransaction] {
    get
    set
    _modify
  }
  final public var $tracks: StayTunedSDK.Observable<[StayTunedSDK.STTrackTransaction]> {
    get
  }
  final public func add(content: StayTunedSDK.STContent)
  final public func add(track: StayTunedSDK.STTrack)
  @objc deinit
}
public struct STContent {
  public let key: Swift.String
  public let type: StayTunedSDK.STContentModelType?
  public let title: Swift.String
  public let ean: Swift.String?
  public let imgSrc: Swift.String?
  public let portraitImgSrc: Swift.String?
  public let landscapeImgSrc: Swift.String?
  public let narrator: Swift.String?
  public let author: Swift.String?
  public let authorBibliographicalNote: Swift.String?
  public let publishingHouse: Swift.String?
  public let imprintName: Swift.String?
  public let advertiser: Swift.String?
  public let language: Swift.String?
  public let descriptionText: Swift.String?
  public let mediaType: StayTunedSDK.STContentMediaType?
  public let diffusionMode: StayTunedSDK.STContentDiffusionMode?
  public let disponibilityStatus: StayTunedSDK.STContentDisponibilityStatus?
  public let complete: Swift.Bool?
  #warning("TODO: documentation")
  public let isExplicitContent: Swift.Bool?
  #warning("TODO: documentation, add usage example")
  public let categories: Swift.String?
  public let copyright: Swift.String?
  public let websiteUrl: Swift.String?
  public let rssFeedUrl: Swift.String?
  public let vastUrl: Swift.String?
  public let pdfUrl: Swift.String?
  public let publicationDate: Foundation.Date?
  public let overallDuration: Swift.Int?
  public let elementList: [StayTunedSDK.STTrack]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class STWeakRef {
  @objc deinit
}
public enum STListType {
  case bookmark, playlist, favorite, queue, custom(Swift.String)
}
extension STListType : Swift.Equatable {
  public static func == (lhs: StayTunedSDK.STListType, rhs: StayTunedSDK.STListType) -> Swift.Bool
}
public enum STKeychainWrapperKeys : Swift.String {
  case refreshToken
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum STPlayerState {
  case playing
  case paused
  case loading
  public static func == (a: StayTunedSDK.STPlayerState, b: StayTunedSDK.STPlayerState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct STTrack {
  public let key: Swift.String
  public let contentKey: Swift.String
  public let type: StayTunedSDK.STTrackModelType?
  public let title: Swift.String
  public let subtitle: Swift.String?
  public let episode: Swift.Int?
  public let season: Swift.Int?
  public let elementNumber: Swift.Int?
  public let chapter: Swift.Int?
  public let chapterPart: Swift.Int?
  public let websiteUrl: Swift.String?
  public let typeOfElement: StayTunedSDK.STTrackTypeOfElement?
  public let publicationDate: Foundation.Date?
  public let highlighted: Swift.Bool?
  public let descriptionText: Swift.String?
  public var imgSrc: Swift.String?
  public let audioSrc: Swift.String?
  public let audioSrcWeight: Swift.Int?
  public let audioDuration: Swift.Int?
  public let createdAt: Foundation.Date?
  public let updatedAt: Foundation.Date?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum STError : Swift.Error {
  case notInitException
  case alreadyInitException
  case featureNotAvailable
  case missingRefreshTokenInKeychain
  public static func == (a: StayTunedSDK.STError, b: StayTunedSDK.STError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol STObservableProtocol {
  associatedtype Observer
  func add(observer: Self.Observer)
  func remove(observer: Self.Observer)
}
public struct STTrackOfflineItem {
  public let audioItem: StayTunedSDK.STTrack
  public var state: StayTunedSDK.STOfflineState
}
extension StayTunedSDK.STTrack : Swift.Encodable {}
extension StayTunedSDK.STTrack : Swift.Decodable {}
extension StayTunedSDK.STTrack : StayTunedSDK.STAudioItemInterface {}
extension StayTunedSDK.STContentLight : Swift.Encodable {}
extension StayTunedSDK.STContentLight : Swift.Decodable {}
extension StayTunedSDK.STContentLight : StayTunedSDK.STAudioItemInterface {}
extension StayTunedSDK.STPlayer : StayTunedSDK.STFeature {}
extension StayTunedSDK.STSectionType : Swift.Equatable {}
extension StayTunedSDK.STSectionType : Swift.Hashable {}
extension StayTunedSDK.STSectionType : Swift.RawRepresentable {}
extension StayTunedSDK.STListLinkedContentType : Swift.Equatable {}
extension StayTunedSDK.STListLinkedContentType : Swift.Hashable {}
extension StayTunedSDK.STListLinkedContentType : Swift.RawRepresentable {}
extension StayTunedSDK.STSection : Swift.Encodable {}
extension StayTunedSDK.STSection : Swift.Decodable {}
extension StayTunedSDK.STContentModelType : Swift.Equatable {}
extension StayTunedSDK.STContentModelType : Swift.Hashable {}
extension StayTunedSDK.STContentModelType : Swift.RawRepresentable {}
extension StayTunedSDK.STContentMediaType : Swift.Equatable {}
extension StayTunedSDK.STContentMediaType : Swift.Hashable {}
extension StayTunedSDK.STContentMediaType : Swift.RawRepresentable {}
extension StayTunedSDK.STContentDiffusionMode : Swift.Equatable {}
extension StayTunedSDK.STContentDiffusionMode : Swift.Hashable {}
extension StayTunedSDK.STContentDiffusionMode : Swift.RawRepresentable {}
extension StayTunedSDK.STContentDisponibilityStatus : Swift.Equatable {}
extension StayTunedSDK.STContentDisponibilityStatus : Swift.Hashable {}
extension StayTunedSDK.STContentDisponibilityStatus : Swift.RawRepresentable {}
extension StayTunedSDK.STTrackModelType : Swift.Equatable {}
extension StayTunedSDK.STTrackModelType : Swift.Hashable {}
extension StayTunedSDK.STTrackModelType : Swift.RawRepresentable {}
extension StayTunedSDK.STTrackTypeOfElement : Swift.Equatable {}
extension StayTunedSDK.STTrackTypeOfElement : Swift.Hashable {}
extension StayTunedSDK.STTrackTypeOfElement : Swift.RawRepresentable {}
extension StayTunedSDK.STSectionLinkedContentType : Swift.Equatable {}
extension StayTunedSDK.STSectionLinkedContentType : Swift.Hashable {}
extension StayTunedSDK.STSectionLinkedContentType : Swift.RawRepresentable {}
extension StayTunedSDK.STPlaylist : Swift.Encodable {}
extension StayTunedSDK.STPlaylist : Swift.Decodable {}
extension StayTunedSDK.STContent : Swift.Encodable {}
extension StayTunedSDK.STContent : Swift.Decodable {}
extension StayTunedSDK.STContent : StayTunedSDK.STAudioItemInterface {}
extension StayTunedSDK.STKeychainWrapperKeys : Swift.Equatable {}
extension StayTunedSDK.STKeychainWrapperKeys : Swift.Hashable {}
extension StayTunedSDK.STKeychainWrapperKeys : Swift.RawRepresentable {}
extension StayTunedSDK.STPlayerState : Swift.Equatable {}
extension StayTunedSDK.STPlayerState : Swift.Hashable {}
extension StayTunedSDK.STError : Swift.Equatable {}
extension StayTunedSDK.STError : Swift.Hashable {}
