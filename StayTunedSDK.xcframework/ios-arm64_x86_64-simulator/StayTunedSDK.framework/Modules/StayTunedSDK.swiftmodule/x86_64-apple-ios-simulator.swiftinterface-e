// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StayTunedSDK
import AVKit
import CoreData
import Foundation
import MediaPlayer
import MobileCoreServices
import Swift
import SystemConfiguration
import UIKit
public struct STContentLightOfflineItem {
  public let audioItem: StayTunedSDK.STContentLight
  public var state: StayTunedSDK.STOfflineState
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol STObservableProtocol {
  associatedtype Observer
  func add(observer: Self.Observer)
  func remove(observer: Self.Observer)
}
@_hasMissingDesignatedInitializers final public class STLocalLists : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STLocalLists
  final public func getLists(completion: @escaping (Swift.Result<[StayTunedSDK.STListProtocol], Swift.Error>) -> Swift.Void)
  final public func create<Item>(name: Swift.String, type: StayTunedSDK.STListType, completion: @escaping (Swift.Result<StayTunedSDK.STList<Item>, Swift.Error>) -> Swift.Void)
  final public func createOrGet<Item>(name: Swift.String, type: StayTunedSDK.STListType, completion: @escaping (Swift.Result<StayTunedSDK.STList<Item>, Swift.Error>) -> Swift.Void)
  final public func getList<Item>(by id: Swift.Int, completion: @escaping (Swift.Result<StayTunedSDK.STList<Item>, Swift.Error>) -> Swift.Void)
  final public func update<Item>(_ list: StayTunedSDK.STList<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  final public func delete(listId: Swift.Int, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  final public func updateItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<[StayTunedSDK.STListItem<Item>], Swift.Error>) -> Swift.Void)
  final public func addItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<[StayTunedSDK.STListItem<Item>], Swift.Error>) -> Swift.Void)
  final public func deleteItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<Swift.Int?, Swift.Error>) -> Swift.Void)
  final public func syncItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<[StayTunedSDK.STListItem<Item>], Swift.Error>) -> Swift.Void)
  @objc deinit
}
public typealias STTrackList = StayTunedSDK.STList<StayTunedSDK.STTrack>
public typealias STContentList = StayTunedSDK.STList<StayTunedSDK.STContentLight>
public typealias STTrackListItem = StayTunedSDK.STListItem<StayTunedSDK.STTrack>
public typealias STContentListItem = StayTunedSDK.STListItem<StayTunedSDK.STContentLight>
@_inheritsConvenienceInitializers @objc(STMediaMO) public class STMediaMO : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public enum STError : Swift.Error {
  case notInitException
  case alreadyInitException
  case featureNotAvailable
  case missingRefreshTokenInKeychain
  case missingAnonymousCredentialsInKeychain
  case unknowned
  public static func == (a: StayTunedSDK.STError, b: StayTunedSDK.STError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc open class STPodcastPage : UIKit.UITableViewController {
  required public init(content: StayTunedSDK.STContent)
  required public init(contentLight: StayTunedSDK.STContentLight)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension STPodcastPage : StayTunedSDK.STPageServerContentProtocol {
}
public protocol STPlayerObserver : AnyObject {
  func playerCurrentTrackDidChange(to track: StayTunedSDK.STTrack)
  func playerCurrentTrackAudioQualityDidChange(to value: StayTunedSDK.STAudioQuality)
  func playerCurrentContentDidChange(to content: StayTunedSDK.STContent)
  func playerStateDidChange(to value: StayTunedSDK.STPlayerState)
  func playerCurrentTimeDidChange(to value: Swift.Double)
  func playerWillSeek(from beginTime: Swift.Double?)
  func playerDidSeek(to endTime: Swift.Double)
  func playerRateDidChange(to value: Swift.Float)
  func playerTimerDidChange(to value: Foundation.TimeInterval?)
  func playerTrackDidEnd(_ track: StayTunedSDK.STTrack)
  func playerFailed(for track: StayTunedSDK.STTrack)
}
extension String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
public enum STKeychainWrapperKeys : Swift.String {
  case refreshToken
  case partnerKey
  case anonymousUsername
  case anonymousPassword
  case userKey
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STAudioQuality {
  case normal
  case hd
  public static func == (a: StayTunedSDK.STAudioQuality, b: StayTunedSDK.STAudioQuality) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct STPlayerConfiguration {
  public var isContentCellVisible: Swift.Bool
  public var onContentCellClick: ((UIKit.UINavigationController) -> Swift.Void)?
  public var preferredAudioQuality: StayTunedSDK.STAudioQuality
  public var shouldResumeTrackFromHistory: ((StayTunedSDK.STTrack, StayTunedSDK.STTrackHistoryItem, ((Swift.Bool) -> Swift.Void)) -> Swift.Void)?
  public init(isContentCellVisible: Swift.Bool = true, onContentCellClick: ((UIKit.UINavigationController) -> Swift.Void)? = nil, preferredAudioQuality: StayTunedSDK.STAudioQuality = .normal, shouldResumeTrackFromHistory: ((StayTunedSDK.STTrack, StayTunedSDK.STTrackHistoryItem, ((Swift.Bool) -> Swift.Void)) -> Swift.Void)? = nil)
}
public class STWeakRef {
  weak public var value: Swift.AnyObject? {
    get
  }
  public init(value: Swift.AnyObject?)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class STPlayer {
  final public var currentList: StayTunedSDK.STPlaylist? {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($currentTrack) final public var currentTrack: StayTunedSDK.STTrack? {
    get
  }
  final public var $currentTrack: StayTunedSDK.Observable<StayTunedSDK.STTrack?> {
    get
  }
  final public var currentTrackAudioQuality: StayTunedSDK.STAudioQuality? {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($currentContent) final public var currentContent: StayTunedSDK.STContent? {
    get
  }
  final public var $currentContent: StayTunedSDK.Observable<StayTunedSDK.STContent?> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($currentTime) final public var currentTime: Swift.Double? {
    get
  }
  final public var $currentTime: StayTunedSDK.Observable<Swift.Double?> {
    get
  }
  final public var currentState: StayTunedSDK.STPlayerState {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($rate) final public var rate: Swift.Float {
    get
  }
  final public var $rate: StayTunedSDK.Observable<Swift.Float> {
    get
  }
  final public var configuration: StayTunedSDK.STPlayerConfiguration {
    get
  }
  final public var timerRemainingDuration: Foundation.TimeInterval? {
    get
  }
  @objc deinit
}
extension STPlayer {
  final public func resume()
}
extension STPlayer {
  public struct Header : Swift.Codable {
    public let key: Swift.String
    public let value: Swift.String
    public init(key: Swift.String, value: Swift.String)
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Source : Swift.Decodable {
    public let urlString: Swift.String
    public let headers: [StayTunedSDK.STPlayer.Header]?
    public init(urlString: Swift.String, headers: [StayTunedSDK.STPlayer.Header]?)
    public init(from decoder: Swift.Decoder) throws
  }
}
extension STPlayer : StayTunedSDK.STObservableProtocol {
  final public func add(observer: StayTunedSDK.STPlayerObserver)
  final public func remove(observer: StayTunedSDK.STPlayerObserver)
  public typealias Observer = StayTunedSDK.STPlayerObserver
}
final public class STPlaylist {
  final public var tracks: [StayTunedSDK.STTrack]
  final public var hasNext: Swift.Bool {
    get
  }
  final public var hasPrevious: Swift.Bool {
    get
  }
  public init(tracks: [StayTunedSDK.STTrack])
  convenience public init(content: StayTunedSDK.STContent)
  @discardableResult
  final public func next() -> StayTunedSDK.STTrack?
  @discardableResult
  final public func previous() -> StayTunedSDK.STTrack?
  @objc deinit
  public init(from decoder: Swift.Decoder) throws
  final public func encode(to encoder: Swift.Encoder) throws
}
public struct STContentCachingOptions {
  public var enabledContentCaching: Swift.Bool
  public var maxCachedContent: Swift.Int
  public init(enabledContentCaching: Swift.Bool = false, maxCachedContent: Swift.Int = 0)
}
public enum STPodcastDescriptionIdentityModels {
  public struct Style {
  }
  public struct ContentData {
  }
}
extension STHelpersNameSpace {
  public struct STTrackInContent : Swift.Equatable {
    public let track: StayTunedSDK.STTrack
    public let content: StayTunedSDK.STContent?
    public init(track: StayTunedSDK.STTrack, inContent content: StayTunedSDK.STContent?)
    public static func == (lhs: StayTunedSDK.STHelpersNameSpace.STTrackInContent, rhs: StayTunedSDK.STHelpersNameSpace.STTrackInContent) -> Swift.Bool
  }
}
public protocol STAudioItemInterface : Swift.Equatable {
  var key: Swift.String { get }
}
extension STAudioItemInterface {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class STContents : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STContents
  @objc deinit
}
extension STContents {
  final public func getContent(by key: Swift.String, completion: @escaping (Swift.Result<StayTunedSDK.STContent, Swift.Error>) -> Swift.Void)
  final public func getContents(completion: @escaping (Swift.Result<[StayTunedSDK.STContentLight], Swift.Error>) -> Swift.Void)
}
public struct STContent {
  public let key: Swift.String
  public let type: StayTunedSDK.STContentModelType?
  public let title: Swift.String
  public let ean: Swift.String?
  public let imgSrc: Swift.String?
  public let portraitImgSrc: Swift.String?
  public let landscapeImgSrc: Swift.String?
  public let narrator: Swift.String?
  public let author: Swift.String?
  public let authorBibliographicalNote: Swift.String?
  public let publishingHouse: Swift.String?
  public let imprintName: Swift.String?
  public let advertiser: Swift.String?
  public let language: Swift.String?
  public let descriptionText: Swift.String?
  public let mediaType: StayTunedSDK.STContentMediaType?
  public let diffusionMode: StayTunedSDK.STContentDiffusionMode?
  public let disponibilityStatus: StayTunedSDK.STContentDisponibilityStatus?
  public let complete: Swift.Bool?
  #warning("TODO: documentation")
  public let isExplicitContent: Swift.Bool?
  #warning("TODO: documentation, add usage example")
  public let categories: Swift.String?
  public let copyright: Swift.String?
  public let websiteUrl: Swift.String?
  public let rssFeedUrl: Swift.String?
  public let vastUrl: Swift.String?
  public let pdfUrl: Swift.String?
  public let publicationDate: Foundation.Date?
  public let overallDuration: Swift.Int?
  public let elementList: [StayTunedSDK.STTrack]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol STFeature {
  static func getInstance() throws -> Self
  static var shared: Self? { get }
}
extension STFeature {
  public static var shared: Self? {
    get
  }
}
public typealias STInternalEventsProtocols = StayTunedSDK.STInternalDownloadEventsProtocol & StayTunedSDK.STInternalPlayerEventsProtocol
public class STInternalEvents {
  public init(with manager: StayTunedSDK.STInternalEventsProtocols? = nil)
  @objc deinit
}
open class STInternalEventsDefaultDelegate : StayTunedSDK.STInternalEventsProtocols {
  public init()
  open func downlaodShouldStart(for track: StayTunedSDK.STTrack) -> Swift.Bool
  open func downloadWillStart(for track: StayTunedSDK.STTrack) -> StayTunedSDK.STPlayer.Source?
  open func downloadDidFinish(for track: StayTunedSDK.STTrack)
  open func playerWillStart(for track: StayTunedSDK.STTrack) -> StayTunedSDK.STPlayer.Source?
  open func playerDidFinish(for track: StayTunedSDK.STTrack)
  open func didFailedToloadItem(for itemUrl: Swift.String, error: Swift.String)
  @objc deinit
}
extension STHelpersNameSpace {
  @_hasMissingDesignatedInitializers public class STColorsManager {
    public static var shared: StayTunedSDK.STHelpersNameSpace.STColorsManager
    public func setBundles(_ bundles: [Foundation.Bundle]?)
    public func color(for name: Swift.String) -> UIKit.UIColor?
    @objc deinit
  }
}
@_hasMissingDesignatedInitializers final public class STExpand : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STExpand
  final public var configuration: StayTunedSDK.STExpandConfiguration {
    get
    set
  }
  final public func present(from presenter: UIKit.UIViewController, with configuration: StayTunedSDK.STExpandConfiguration? = nil)
  final public func dismiss(completion: (() -> Swift.Void)?)
  @objc deinit
}
public struct STUIOptions {
  public let brandColor: UIKit.UIColor
  public init(brandColor: UIKit.UIColor = .black)
}
@_inheritsConvenienceInitializers @objc(STBlobMO) public class STBlobMO : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
#warning("TODO: STTrackingNavigationAdapter")
@_hasMissingDesignatedInitializers final public class STWishList : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STWishList
  @StayTunedSDK.Observable @_projectedValueProperty($contents) final public var contents: [StayTunedSDK.STContentWish] {
    get
    set
    _modify
  }
  final public var $contents: StayTunedSDK.Observable<[StayTunedSDK.STContentWish]> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($tracks) final public var tracks: [StayTunedSDK.STTrackWish] {
    get
    set
    _modify
  }
  final public var $tracks: StayTunedSDK.Observable<[StayTunedSDK.STTrackWish]> {
    get
  }
  final public func add(content: StayTunedSDK.STContentWish)
  final public func add(track: StayTunedSDK.STTrackWish)
  final public func remove(content: StayTunedSDK.STContentWish)
  final public func remove(track: StayTunedSDK.STTrackWish)
  @objc deinit
}
extension STHelpersNameSpace {
  @_hasMissingDesignatedInitializers public class STUIDelegate {
    public static var shared: StayTunedSDK.STHelpersNameSpace.STUIDelegate {
      get
    }
    public func imageFormat(forSectionType sectionType: StayTunedSDK.STSectionType) -> StayTunedSDK.STHelpersNameSpace.STFormat
    public func layout(forSectionType sectionType: StayTunedSDK.STSectionType) -> StayTunedSDK.STHelpersNameSpace.STSectionLayoutInfos
    public func sectionItemTitle(forContent content: StayTunedSDK.STContent) -> Swift.String?
    public func sectionItemTitle(forContent content: StayTunedSDK.STContentLight) -> Swift.String?
    public func sectionItemSubtitle(forContent content: StayTunedSDK.STContent, forSectionType sectionType: StayTunedSDK.STSectionType?) -> Swift.String?
    public func sectionItemSubtitle(forContentLight content: StayTunedSDK.STContentLight, forSectionType sectionType: StayTunedSDK.STSectionType?) -> Swift.String?
    @objc deinit
  }
}
public enum STListType {
  case bookmark, playlist, favorite, queue, custom(Swift.String)
}
extension STListType : Swift.Equatable {
  public static func == (lhs: StayTunedSDK.STListType, rhs: StayTunedSDK.STListType) -> Swift.Bool
}
public enum STListLinkedContentType : Swift.String {
  case content
  case track
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol STListProtocol {
  var id: Swift.Int? { get }
  var name: Swift.String? { get set }
  var type: StayTunedSDK.STListType? { get set }
  var imgSrc: Swift.String? { get set }
  var linkedContentType: StayTunedSDK.STListLinkedContentType? { get }
  var numberOfItems: Swift.Int? { get }
  var createdAt: Foundation.Date? { get }
  var updatedAt: Foundation.Date? { get }
  func delete(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func getItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func update(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func syncItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
}
public struct STList<Item> : StayTunedSDK.STListProtocol {
  public var isLocal: Swift.Bool {
    get
  }
  public var id: Swift.Int? {
    get
  }
  public var name: Swift.String? {
    get
    set
  }
  public var type: StayTunedSDK.STListType? {
    get
    set
  }
  public var imgSrc: Swift.String? {
    get
    set
  }
  public var linkedContentType: StayTunedSDK.STListLinkedContentType? {
    get
  }
  public var numberOfItems: Swift.Int? {
    get
  }
  public var items: [StayTunedSDK.STListItem<Item>] {
    get
    set
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var updatedAt: Foundation.Date? {
    get
  }
}
extension STList {
  public func delete(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func getItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func update(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func updateItems(_ items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func updateItem(_ item: StayTunedSDK.STListItem<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func addItems(_ items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func addItem(_ item: StayTunedSDK.STListItem<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func deleteItems(_ items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func deleteItem(_ item: StayTunedSDK.STListItem<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func syncItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
}
extension STList : StayTunedSDK.STObservableProtocol {
  public func add(observer: StayTunedSDK.STListObserver)
  public func remove(observer: StayTunedSDK.STListObserver)
  public typealias Observer = StayTunedSDK.STListObserver
}
public protocol STListObserver : AnyObject {
  func itemsDidChange<Item>(to value: [StayTunedSDK.STListItem<Item>])
}
@_hasMissingDesignatedInitializers final public class STBookmarked : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STBookmarked
  @StayTunedSDK.Observable @_projectedValueProperty($contents) final public var contents: [StayTunedSDK.STContent] {
    get
    set
    _modify
  }
  final public var $contents: StayTunedSDK.Observable<[StayTunedSDK.STContent]> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($tracks) final public var tracks: [StayTunedSDK.STTrack] {
    get
    set
    _modify
  }
  final public var $tracks: StayTunedSDK.Observable<[StayTunedSDK.STTrack]> {
    get
  }
  final public func add(content: StayTunedSDK.STContent)
  final public func add(track: StayTunedSDK.STTrack)
  final public func remove(content: StayTunedSDK.STContent)
  final public func remove(track: StayTunedSDK.STTrack)
  @objc deinit
}
public struct STFloatingChipConfiguration {
  public enum Size : CoreGraphics.CGFloat {
    case small
    case medium
    case large
    public typealias RawValue = CoreGraphics.CGFloat
    public var rawValue: CoreGraphics.CGFloat {
      get
    }
    public init?(rawValue: CoreGraphics.CGFloat)
  }
  public enum Position {
    case bottomRight(horizontalMargin: CoreGraphics.CGFloat, verticalMargin: CoreGraphics.CGFloat)
    case bottomLeft(horizontalMargin: CoreGraphics.CGFloat, verticalMargin: CoreGraphics.CGFloat)
  }
  public let size: StayTunedSDK.STFloatingChipConfiguration.Size
  public let position: StayTunedSDK.STFloatingChipConfiguration.Position
  public let animate: Swift.Bool
  public init(size: StayTunedSDK.STFloatingChipConfiguration.Size = .medium, position: StayTunedSDK.STFloatingChipConfiguration.Position = .bottomRight(horizontalMargin: 10, verticalMargin: 10), animate: Swift.Bool = true)
}
extension STHelpersNameSpace {
  public struct STCoreConfiguration {
    public init(apiKey: Swift.String, audioDownloadIsSequential: Swift.Bool = false, defaultImage: UIKit.UIImage? = nil, localizationOptions: [(bundle: Foundation.Bundle, tableName: Swift.String)]? = nil, assetsBundles: [Foundation.Bundle]?)
  }
}
@_hasMissingDesignatedInitializers final public class STFloatingChip : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STFloatingChip
  @discardableResult
  final public func display(in viewController: UIKit.UIViewController, with configuration: StayTunedSDK.STFloatingChipConfiguration) -> UIKit.UIView
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class STSections : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STSections
  @objc deinit
}
extension STSections {
  final public func getSections(completion: @escaping (Swift.Result<[StayTunedSDK.STSection], Swift.Error>) -> Swift.Void)
  final public func getSection(by id: Swift.Int, completion: @escaping (Swift.Result<StayTunedSDK.STSection, Swift.Error>) -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class STTracking : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STTracking
  @objc deinit
}
extension STTracking {
  final public func inject(adapters: [StayTunedSDK.STTrackingAdapter])
}
@_hasMissingDesignatedInitializers final public class STLibrary : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STLibrary
  @StayTunedSDK.Observable @_projectedValueProperty($contents) final public var contents: [StayTunedSDK.STContentTransaction] {
    get
    set
    _modify
  }
  final public var $contents: StayTunedSDK.Observable<[StayTunedSDK.STContentTransaction]> {
    get
  }
  @StayTunedSDK.Observable @_projectedValueProperty($tracks) final public var tracks: [StayTunedSDK.STTrackTransaction] {
    get
    set
    _modify
  }
  final public var $tracks: StayTunedSDK.Observable<[StayTunedSDK.STTrackTransaction]> {
    get
  }
  final public func add(content: StayTunedSDK.STContent)
  final public func add(track: StayTunedSDK.STTrack)
  @objc deinit
}
extension STHelpersNameSpace {
  @objc public class STImageView : UIKit.UIView {
    @objc dynamic public init()
    @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    final public let uiimageView: UIKit.UIImageView
    public var imageContentMode: UIKit.UIView.ContentMode {
      get
      set
    }
    public var spinAnimationColor: UIKit.UIColor? {
      get
      set
    }
    public var url: Foundation.URL? {
      get
      set
    }
    public func setFirstAvailableImage(forUrls urls: [Foundation.URL?])
    @objc override dynamic public init(frame: CoreGraphics.CGRect)
    @objc deinit
  }
}
public struct STTrackHistoryItem {
  public let audioItem: StayTunedSDK.STTrack
  public var time: Swift.Double
  public var createdAt: Foundation.Date
  public var updatedAt: Foundation.Date
}
extension STTrackHistoryItem {
  public static func updateOrder(lhs: StayTunedSDK.STTrackHistoryItem, rhs: StayTunedSDK.STTrackHistoryItem) -> Swift.Bool
}
public struct STOptions {
  public let uiOptions: StayTunedSDK.STUIOptions
  public let contentCachingOptions: StayTunedSDK.STContentCachingOptions
  public init(uiOptions: StayTunedSDK.STUIOptions = STUIOptions(), contentCachingOptions: StayTunedSDK.STContentCachingOptions = STContentCachingOptions())
}
public struct STSection {
  public let id: Swift.Int
  public let name: Swift.String
  public let type: StayTunedSDK.STSectionType?
  public let linkedContentType: StayTunedSDK.STSectionLinkedContentType?
  public let order: Swift.Int?
  public let highlighted: Swift.Bool?
  public let searchable: Swift.Bool?
  public let grouped: Swift.Bool?
  public let numberOfItems: Swift.Int?
  public let imgSrc: Swift.String?
  public let landscapeImgSrc: Swift.String?
  public let hdImgSrc: Swift.String?
  public let hdLandscapeImgSrc: Swift.String?
  public let linkedContents: [StayTunedSDK.STContentLight]?
  public var linkedElements: [StayTunedSDK.STTrack]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension STSection : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public static func == (a: StayTunedSDK.STSection, b: StayTunedSDK.STSection) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(STLocalListItemMO) public class STLocalListItemMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension STHelpersNameSpace {
  @objc @_hasMissingDesignatedInitializers public class STPageViewController : UIKit.UIPageViewController {
    public var numberOfScreens: Swift.Int?
    public var currentPageIndex: Swift.Int?
    @objc deinit
    @objc override dynamic public init(transitionStyle style: UIKit.UIPageViewController.TransitionStyle, navigationOrientation: UIKit.UIPageViewController.NavigationOrientation, options: [UIKit.UIPageViewController.OptionsKey : Any]? = nil)
  }
}
extension STHelpersNameSpace.STPageViewController : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
public struct STContentWish {
  public let id: Swift.Int
  public let audioItem: StayTunedSDK.STContent
  public let createdAt: Swift.String?
}
public struct STTrackWish {
  public let id: Swift.Int
  public let audioItem: StayTunedSDK.STTrack
  public let createdAt: Swift.String?
}
@_hasMissingDesignatedInitializers final public class STOffline : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STOffline
  final public var tracks: [StayTunedSDK.STTrackOfflineItem] {
    get
  }
  final public func add(track: StayTunedSDK.STTrack, completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? = nil)
  final public func remove(track: StayTunedSDK.STTrack) throws
  @objc deinit
}
extension STOffline : StayTunedSDK.STObservableProtocol {
  final public func add(observer: StayTunedSDK.STOfflineObserver)
  final public func remove(observer: StayTunedSDK.STOfflineObserver)
  public typealias Observer = StayTunedSDK.STOfflineObserver
}
public protocol STOfflineObserver : AnyObject {
  func offlineContentsDidChange(to value: [StayTunedSDK.STContentLightOfflineItem])
  func offlineTracksDidChange(to value: [StayTunedSDK.STTrackOfflineItem])
}
@objc open class STPlayerPage : UIKit.UITableViewController {
  @objc required dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public protocol STPlayerPageProtocol {
  init()
}
extension STPlayerPage : StayTunedSDK.STPlayerPageProtocol {
}
extension STPlayerPage : StayTunedSDK.STClassServerCompliant {
  public typealias Constraint = StayTunedSDK.STPlayerPageProtocol
}
public protocol STInternalDownloadEventsProtocol : AnyObject {
  func downlaodShouldStart(for track: StayTunedSDK.STTrack) -> Swift.Bool
  func downloadWillStart(for track: StayTunedSDK.STTrack) -> StayTunedSDK.STPlayer.Source?
  func downloadDidFinish(for track: StayTunedSDK.STTrack)
}
final public class StayTunedSDK {
  @discardableResult
  public init(appId: Swift.String, authToken: Swift.String, options: StayTunedSDK.STOptions = STOptions()) throws
  public static func getInstance() throws -> StayTunedSDK.StayTunedSDK
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class STHistory : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STHistory
  final public var tracks: [StayTunedSDK.STTrackHistoryItem] {
    get
  }
  final public func trackHistoryItems(for keys: [Swift.String]) -> [StayTunedSDK.STTrackHistoryItem]
  @objc deinit
}
public protocol STHistoryObserver : AnyObject {
  func historyTracksDidChange(to value: [StayTunedSDK.STTrackHistoryItem])
}
extension STHistory : StayTunedSDK.STObservableProtocol {
  final public func add(observer: StayTunedSDK.STHistoryObserver)
  final public func remove(observer: StayTunedSDK.STHistoryObserver)
  public typealias Observer = StayTunedSDK.STHistoryObserver
}
extension STBlobMO {
  @objc @NSManaged dynamic public var blob: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var media: StayTunedSDK.STMediaMO? {
    @objc get
    @objc set
  }
}
public protocol STTrackingAdapter {
}
public protocol STTrackingPlayerAdapter : StayTunedSDK.STTrackingAdapter {
  func trackDidStart(track: StayTunedSDK.STTrack)
  func positionDidChange(position: Swift.Double)
  func durationDidChange(duration: Foundation.TimeInterval)
  func percentilePlayed(percentile: Swift.Int)
}
public protocol STUIFeatureInterface {
  func launchUI()
}
@_hasMissingDesignatedInitializers final public class STLists : StayTunedSDK.STFeature {
  public static func getInstance() throws -> StayTunedSDK.STLists
  final public func getLists(completion: @escaping (Swift.Result<[StayTunedSDK.STListProtocol], Swift.Error>) -> Swift.Void)
  final public func create<Item>(name: Swift.String, type: StayTunedSDK.STListType, completion: @escaping (Swift.Result<StayTunedSDK.STList<Item>, Swift.Error>) -> Swift.Void)
  final public func createOrGet<Item>(name: Swift.String, type: StayTunedSDK.STListType, completion: @escaping (Swift.Result<StayTunedSDK.STList<Item>, Swift.Error>) -> Swift.Void)
  final public func getList<Item>(by id: Swift.Int, completion: @escaping (Swift.Result<StayTunedSDK.STList<Item>, Swift.Error>) -> Swift.Void)
  final public func update<Item>(_ list: StayTunedSDK.STList<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  final public func delete(listId: Swift.Int, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  final public func updateItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<[StayTunedSDK.STListItem<Item>], Swift.Error>) -> Swift.Void)
  final public func addItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<[StayTunedSDK.STListItem<Item>], Swift.Error>) -> Swift.Void)
  final public func deleteItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<Swift.Int?, Swift.Error>) -> Swift.Void)
  final public func syncItems<Item>(listId: Swift.Int, items: [StayTunedSDK.STListItem<Item>], completion: @escaping (Swift.Result<[StayTunedSDK.STListItem<Item>], Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension STHelpersNameSpace {
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class STFanViewController : StayTunedSDK.STHelpersNameSpace.STPageViewController {
    @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
      @objc get
    }
    public func dismiss(completion: (() -> Swift.Void)?)
    public func update(screens: [UIKit.UINavigationController])
    @objc deinit
  }
}
extension STHelpersNameSpace.STFanViewController : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension STHelpersNameSpace.STFanViewController : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension STHelpersNameSpace.STFanViewController : UIKit.UIPageViewControllerDelegate {
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, willTransitionTo pendingViewControllers: [UIKit.UIViewController])
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
}
public enum STPlayerState {
  case playing
  case paused
  case loading
  public static func == (a: StayTunedSDK.STPlayerState, b: StayTunedSDK.STPlayerState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct STTrack {
  public let key: Swift.String
  public let contentKey: Swift.String
  public let contentTitle: Swift.String?
  public let type: StayTunedSDK.STTrackModelType?
  public let title: Swift.String
  public let subtitle: Swift.String?
  public let episode: Swift.Int?
  public let season: Swift.Int?
  public let elementNumber: Swift.Int?
  public let chapter: Swift.Int?
  public let chapterPart: Swift.Int?
  public let websiteUrl: Swift.String?
  public let typeOfElement: StayTunedSDK.STTrackTypeOfElement?
  public let publicationDate: Foundation.Date?
  public let highlighted: Swift.Bool?
  public let descriptionText: Swift.String?
  public var imgSrc: Swift.String?
  public let audioSrc: Swift.String?
  public let audioSrcWeight: Swift.Int?
  public let hdAudioSrc: Swift.String?
  public let hdAudioSrcWeight: Swift.Int?
  public let audioDuration: Swift.Int?
  public let createdAt: Foundation.Date?
  public let updatedAt: Foundation.Date?
  public init(key: Swift.String, contentKey: Swift.String, contentTitle: Swift.String?, type: StayTunedSDK.STTrackModelType?, title: Swift.String, subtitle: Swift.String?, episode: Swift.Int?, season: Swift.Int?, elementNumber: Swift.Int?, chapter: Swift.Int?, chapterPart: Swift.Int?, websiteUrl: Swift.String?, typeOfElement: StayTunedSDK.STTrackTypeOfElement?, publicationDate: Foundation.Date?, highlighted: Swift.Bool?, descriptionText: Swift.String?, imgSrc: Swift.String?, audioSrc: Swift.String?, audioSrcWeight: Swift.Int?, hdAudioSrc: Swift.String?, hdAudioSrcWeight: Swift.Int?, audioDuration: Swift.Int?, createdAt: Foundation.Date?, updatedAt: Foundation.Date?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension STTrack {
  public var offlineStatus: StayTunedSDK.STOfflineState {
    get
  }
  public var history: Swift.Double? {
    get
  }
}
extension STTrack : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum STOfflineState : Swift.Equatable, Swift.Codable {
  case notDownloaded
  case queued
  case downloading(Swift.Float)
  case downloaded
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: StayTunedSDK.STOfflineState, b: StayTunedSDK.STOfflineState) -> Swift.Bool
}
public protocol STClassServerCompliant {
  associatedtype Constraint
  static var FromClassServer: Any.Type? { get }
}
extension STClassServerCompliant where Self : AnyObject {
  public static var FromClassServer: Any.Type? {
    get
  }
}
open class STClassServer {
  public init()
  open func classFor<ClassType>(_ type: ClassType.Type) -> Any.Type?
  @objc deinit
}
public enum STTrackModelType : Swift.String, Swift.Codable {
  case track
  case livetrack
  case chapter
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STTrackTypeOfElement : Swift.String, Swift.Codable {
  case full
  case trailer
  case bonus
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension STHelpersNameSpace {
  public struct STSectionLayoutInfos {
    public let itemImageFormat: CoreGraphics.CGFloat
    public let minimumLineSpacing: CoreGraphics.CGFloat
    public let numberOfItemsinScreenWidth: CoreGraphics.CGFloat
    public let imageSrcFormat: StayTunedSDK.STHelpersNameSpace.STFormat
    public var itemSize: CoreGraphics.CGSize?
    public init(itemImageFormat: CoreGraphics.CGFloat, minimumLineSpacing: CoreGraphics.CGFloat, numberOfItemsinScreenWidth: CoreGraphics.CGFloat, imageSrcFormat: StayTunedSDK.STHelpersNameSpace.STFormat)
  }
}
public enum STHelpersNameSpace {
}
extension STPlayer {
  public static func getInstance() throws -> StayTunedSDK.STPlayer
  final public func setConfiguration(_ configuration: StayTunedSDK.STPlayerConfiguration)
  final public func setPreferredAudioQuality(_ preferredAudioQuality: StayTunedSDK.STAudioQuality)
  final public func play(playlist: StayTunedSDK.STPlaylist, at index: Swift.Int)
  final public func stop()
  final public func next()
  final public func prev()
  final public func seekTo(time: Swift.Double)
  final public func fastForward()
  final public func rewind()
  final public func setStopTimer(time: Swift.Double)
  final public func setStopAtEndOfTrack()
  final public func removeStopTimer()
  final public func getAudioDuration() -> Swift.Double?
  final public func getAudioCurrentTime() -> Swift.Double?
  final public func isPlaying() -> Swift.Bool
  final public func isPaused() -> Swift.Bool
  final public func isLoading() -> Swift.Bool
}
extension STPlayer {
  @available(*, deprecated, message: "Use STExpand feature istead")
  final public func openExpand(presenter viewController: UIKit.UIViewController)
  @available(*, deprecated, message: "Use STFloatingChip feature istead")
  @discardableResult
  final public func displayChip(in controller: UIKit.UIViewController) -> UIKit.UIView
  final public func setMiniPlayer(in viewController: UIKit.UIViewController)
  final public func displayMiniPlayer(_ value: Swift.Bool)
}
public enum STSectionLinkedContentType : Swift.String, Swift.Codable {
  case content
  case element
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STSectionType : Swift.String, Swift.Codable {
  case `default`
  case new
  case trailer
  case highlight
  case category
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct STContentTransaction {
  public let audioItem: StayTunedSDK.STContent
  public let paymentType: Swift.String?
  public let amount: Swift.Int
  public let currency: Swift.String?
  public let status: Swift.String?
  public let createdAt: Swift.String?
}
public struct STTrackTransaction {
  public let audioItem: StayTunedSDK.STTrack
  public let paymentType: Swift.String?
  public let amount: Swift.Int
  public let currency: Swift.String?
  public let status: Swift.String?
  public let createdAt: Swift.String?
}
extension STHistoryItemMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<StayTunedSDK.STHistoryItemMO>
}
extension STHelpersNameSpace {
  public class MigrationBypassing {
    public init()
    public func setHistory(value: Swift.Double, for track: StayTunedSDK.STTrack) throws
    public func saveAudio(url: Swift.String, data: Foundation.Data)
    @objc deinit
  }
}
extension STHelpersNameSpace {
  @_hasMissingDesignatedInitializers public class StayTunedCore {
    public static var development: Swift.Bool
    public static let bundle: Foundation.Bundle
    public static var shared: StayTunedSDK.STHelpersNameSpace.StayTunedCore!
    public var classServer: StayTunedSDK.STClassServer
    public var pageServer: StayTunedSDK.STPageServer
    public var internalEvents: StayTunedSDK.STInternalEvents
    public var displayRootViewController: UIKit.UIViewController?
    public func setConfiguration(_ configurations: StayTunedSDK.STHelpersNameSpace.STCoreConfiguration)
    public func application(_ application: UIKit.UIApplication, handleEventsForBackgroundURLSession identifier: Swift.String, completionHandler: @escaping () -> Swift.Void)
    @objc deinit
  }
}
public enum STContentModelType : Swift.String, Swift.Codable {
  case podcast
  case audiobook
  case livestream
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STContentMediaType : Swift.String, Swift.Codable {
  case edito
  case brand
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum STContentDiffusionMode : Swift.String, Swift.Codable {
  case episodic
  case serial
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum STContentDisponibilityStatus : Swift.String, Swift.Codable {
  case forthcoming
  case available
  case stopped
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
extension STHelpersNameSpace {
  @_hasMissingDesignatedInitializers public class STPublicAPI {
    public class func searchContents(title: Swift.String? = nil, author: Swift.String? = nil, narrator: Swift.String? = nil, completion: ((Swift.Result<[StayTunedSDK.STContentLight], Swift.Error>) -> Swift.Void)? = nil)
    public class func searchElements(title: Swift.String? = nil, completion: ((Swift.Result<[StayTunedSDK.STTrack], Swift.Error>) -> Swift.Void)? = nil)
    @objc deinit
  }
}
extension STHelpersNameSpace {
  @_hasMissingDesignatedInitializers public class STImagesManager {
    public static var shared: StayTunedSDK.STHelpersNameSpace.STImagesManager
    public func setBundles(_ bundles: [Foundation.Bundle]?)
    public func image(for name: Swift.String) -> UIKit.UIImage?
    @objc deinit
  }
}
public struct STExpandConfiguration {
  public let halfExpand: Swift.Bool
  public init(halfExpand: Swift.Bool = true)
}
@propertyWrapper public class Observable<Value> {
  @available(*, deprecated, message: "Observation will be removed in 1.1.0. Please use delegate pattern.")
  public var projectedValue: StayTunedSDK.Observable<Value> {
    get
  }
  @available(*, deprecated, message: "Observation will be removed in 1.1.0. Please use delegate pattern.")
  public var wrappedValue: Value {
    get
    set
  }
  public init(wrappedValue: Value)
  @objc deinit
}
extension Observable {
  @discardableResult
  @available(*, deprecated, message: "Observation will be removed in 1.1.0. Please use delegate pattern.")
  public func observe(with closure: @escaping (Value) -> Swift.Void) -> StayTunedSDK.STObservable.Cancellable
}
public enum STObservable {
  @_hasMissingDesignatedInitializers final public class Cancellable {
    @objc deinit
    final public func cancel()
  }
}
@_hasMissingDesignatedInitializers final public class STAuth : StayTunedSDK.STFeature {
  public enum Status {
    case authenticating
    case notAuthenticated
    case authenticated
    public static func == (a: StayTunedSDK.STAuth.Status, b: StayTunedSDK.STAuth.Status) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  final public var status: StayTunedSDK.STAuth.Status {
    get
  }
  public static func getInstance() throws -> StayTunedSDK.STAuth
  @objc deinit
}
extension STAuth {
  final public func connect(partnerKey: Swift.String, partnerToken: Swift.String, completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)?)
  final public func refresh(completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)?)
  final public func connectAnonymous(completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)?)
}
extension STAuth : StayTunedSDK.STObservableProtocol {
  final public func add(observer: StayTunedSDK.STAuthObserver)
  final public func remove(observer: StayTunedSDK.STAuthObserver)
  public typealias Observer = StayTunedSDK.STAuthObserver
}
public protocol STAuthObserver : AnyObject {
  func didConnect()
}
@objc open class STEpisodePage : UIKit.UITableViewController {
  required public init(episode: StayTunedSDK.STTrack)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc deinit
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension STEpisodePage : StayTunedSDK.STPageServerPageProtocol {
}
@_inheritsConvenienceInitializers @objc(STHistoryItemMO) public class STHistoryItemMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
open class STPageServer {
  public init()
  open func trackPageType() -> StayTunedSDK.STPageServerPageProtocol.Type
  open func contentPageType() -> StayTunedSDK.STPageServerContentProtocol.Type
  open func libraryPageType() -> StayTunedSDK.STPageServerLibraryProtocol.Type?
  @objc deinit
}
public protocol STPageServerPageProtocol : UIKit.UIViewController {
  init(episode: StayTunedSDK.STTrack)
}
public protocol STPageServerContentProtocol : UIKit.UIViewController {
  init(content: StayTunedSDK.STContent)
  init(contentLight: StayTunedSDK.STContentLight)
}
public protocol STPageServerLibraryProtocol : UIKit.UIViewController {
}
extension STHelpersNameSpace {
  public enum STFormat {
    case square
    case portrait
    case landscape
    public var ratio: CoreGraphics.CGFloat {
      get
    }
    public static func == (a: StayTunedSDK.STHelpersNameSpace.STFormat, b: StayTunedSDK.STHelpersNameSpace.STFormat) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
public struct STContentLight {
  public let key: Swift.String
  public let type: StayTunedSDK.STContentModelType?
  public let title: Swift.String
  public let ean: Swift.String?
  public let imgSrc: Swift.String?
  public let portraitImgSrc: Swift.String?
  public let landscapeImgSrc: Swift.String?
  public let narrator: Swift.String?
  public let author: Swift.String?
  public let publicationDate: Foundation.Date?
  public let overallDuration: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension STHelpersNameSpace {
  @_hasMissingDesignatedInitializers public class STLocalization {
    public static var shared: StayTunedSDK.STHelpersNameSpace.STLocalization {
      get
    }
    public func localized(key: Swift.String, with arguments: Swift.CVarArg...) -> Swift.String?
    public func localized(key: Swift.String, with argument: Swift.CVarArg) -> Swift.String?
    public func localized(key: Swift.String) -> Swift.String?
    @objc deinit
  }
}
public struct STTrackOfflineItem {
  public let audioItem: StayTunedSDK.STTrack
  public var state: StayTunedSDK.STOfflineState
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension STMediaMO {
  @objc @NSManaged dynamic public var url: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var size: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var blob: StayTunedSDK.STBlobMO? {
    @objc get
    @objc set
  }
}
public protocol STInternalPlayerEventsProtocol : AnyObject {
  func playerWillStart(for track: StayTunedSDK.STTrack) -> StayTunedSDK.STPlayer.Source?
  func playerDidFinish(for track: StayTunedSDK.STTrack)
  func didFailedToloadItem(for itemUrl: Swift.String, error: Swift.String)
}
public struct STListItem<Item> {
  public var id: Swift.Int?
  public var key: Swift.String?
  public var item: Item?
  public var order: Swift.Int?
  public var value: Swift.String?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
}
extension STListItem : Swift.Equatable {
  public static func == (lhs: StayTunedSDK.STListItem<Item>, rhs: StayTunedSDK.STListItem<Item>) -> Swift.Bool
}
extension STListItem {
  public static func defaultOrder(lhs: StayTunedSDK.STListItem<Item>, rhs: StayTunedSDK.STListItem<Item>) -> Swift.Bool
}
extension STListItem where Item == StayTunedSDK.STTrack {
  public init(track: StayTunedSDK.STTrack)
}
extension STListItem where Item == StayTunedSDK.STContentLight {
  public init(contentLight: StayTunedSDK.STContentLight)
}
extension StayTunedSDK.STContentLightOfflineItem : Swift.Encodable {}
extension StayTunedSDK.STContentLightOfflineItem : Swift.Decodable {}
extension StayTunedSDK.STContentLight : Swift.Encodable {}
extension StayTunedSDK.STContentLight : Swift.Decodable {}
extension StayTunedSDK.STContentLight : StayTunedSDK.STAudioItemInterface {}
extension StayTunedSDK.STError : Swift.Equatable {}
extension StayTunedSDK.STError : Swift.Hashable {}
extension StayTunedSDK.STKeychainWrapperKeys : Swift.Equatable {}
extension StayTunedSDK.STKeychainWrapperKeys : Swift.Hashable {}
extension StayTunedSDK.STKeychainWrapperKeys : Swift.RawRepresentable {}
extension StayTunedSDK.STTrack : Swift.Encodable {}
extension StayTunedSDK.STTrack : Swift.Decodable {}
extension StayTunedSDK.STTrack : StayTunedSDK.STAudioItemInterface {}
extension StayTunedSDK.STAudioQuality : Swift.Equatable {}
extension StayTunedSDK.STAudioQuality : Swift.Hashable {}
extension StayTunedSDK.STPlayer : StayTunedSDK.STFeature {}
extension StayTunedSDK.STPlaylist : Swift.Encodable {}
extension StayTunedSDK.STPlaylist : Swift.Decodable {}
extension StayTunedSDK.STContent : Swift.Encodable {}
extension StayTunedSDK.STContent : Swift.Decodable {}
extension StayTunedSDK.STContent : StayTunedSDK.STAudioItemInterface {}
extension StayTunedSDK.STListLinkedContentType : Swift.Equatable {}
extension StayTunedSDK.STListLinkedContentType : Swift.Hashable {}
extension StayTunedSDK.STListLinkedContentType : Swift.RawRepresentable {}
extension StayTunedSDK.STSection : Swift.Encodable {}
extension StayTunedSDK.STSection : Swift.Decodable {}
extension StayTunedSDK.STFloatingChipConfiguration.Size : Swift.Equatable {}
extension StayTunedSDK.STFloatingChipConfiguration.Size : Swift.Hashable {}
extension StayTunedSDK.STFloatingChipConfiguration.Size : Swift.RawRepresentable {}
extension StayTunedSDK.STTrackOfflineItem : Swift.Encodable {}
extension StayTunedSDK.STTrackOfflineItem : Swift.Decodable {}
extension StayTunedSDK.STPlayerState : Swift.Equatable {}
extension StayTunedSDK.STPlayerState : Swift.Hashable {}
extension StayTunedSDK.STTrackModelType : Swift.Equatable {}
extension StayTunedSDK.STTrackModelType : Swift.Hashable {}
extension StayTunedSDK.STTrackModelType : Swift.RawRepresentable {}
extension StayTunedSDK.STTrackTypeOfElement : Swift.Equatable {}
extension StayTunedSDK.STTrackTypeOfElement : Swift.Hashable {}
extension StayTunedSDK.STTrackTypeOfElement : Swift.RawRepresentable {}
extension StayTunedSDK.STSectionLinkedContentType : Swift.Equatable {}
extension StayTunedSDK.STSectionLinkedContentType : Swift.Hashable {}
extension StayTunedSDK.STSectionLinkedContentType : Swift.RawRepresentable {}
extension StayTunedSDK.STSectionType : Swift.Equatable {}
extension StayTunedSDK.STSectionType : Swift.Hashable {}
extension StayTunedSDK.STSectionType : Swift.RawRepresentable {}
extension StayTunedSDK.STContentModelType : Swift.Equatable {}
extension StayTunedSDK.STContentModelType : Swift.Hashable {}
extension StayTunedSDK.STContentModelType : Swift.RawRepresentable {}
extension StayTunedSDK.STContentMediaType : Swift.Equatable {}
extension StayTunedSDK.STContentMediaType : Swift.Hashable {}
extension StayTunedSDK.STContentMediaType : Swift.RawRepresentable {}
extension StayTunedSDK.STContentDiffusionMode : Swift.Equatable {}
extension StayTunedSDK.STContentDiffusionMode : Swift.Hashable {}
extension StayTunedSDK.STContentDiffusionMode : Swift.RawRepresentable {}
extension StayTunedSDK.STContentDisponibilityStatus : Swift.Equatable {}
extension StayTunedSDK.STContentDisponibilityStatus : Swift.Hashable {}
extension StayTunedSDK.STContentDisponibilityStatus : Swift.RawRepresentable {}
extension StayTunedSDK.STAuth.Status : Swift.Equatable {}
extension StayTunedSDK.STAuth.Status : Swift.Hashable {}
extension StayTunedSDK.STHelpersNameSpace.STFormat : Swift.Equatable {}
extension StayTunedSDK.STHelpersNameSpace.STFormat : Swift.Hashable {}
