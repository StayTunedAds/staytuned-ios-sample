// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target x86_64-apple-ios13.1-macabi -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StayTunedSDK
import AVKit
import CoreData
import Foundation
import MediaPlayer
import MobileCoreServices
import Swift
import SystemConfiguration
import UIKit
public struct STContentTransaction {
  public let audioItem: STContent
  public let paymentType: Swift.String?
  public let amount: Swift.Int
  public let currency: Swift.String?
  public let status: Swift.String?
  public let createdAt: Swift.String?
}
public struct STTrackTransaction {
  public let audioItem: STTrack
  public let paymentType: Swift.String?
  public let amount: Swift.Int
  public let currency: Swift.String?
  public let status: Swift.String?
  public let createdAt: Swift.String?
}
public protocol STTrackingAdapter {
}
public struct STOptions {
  public let uiOptions: STUIOptions
  public let contentCachingOptions: STContentCachingOptions
  public init(uiOptions: STUIOptions = STUIOptions(), contentCachingOptions: STContentCachingOptions = STContentCachingOptions())
}
@_hasMissingDesignatedInitializers final public class STTracking : STFeature {
  public static func getInstance() throws -> STTracking
  @objc deinit
}
extension STTracking {
  final public func inject(adapters: [STTrackingAdapter])
}
extension String : Swift.CodingKey {
  public var stringValue: Swift.String {
    get
  }
  public init?(stringValue: Swift.String)
  public var intValue: Swift.Int? {
    get
  }
  public init?(intValue: Swift.Int)
}
@_hasMissingDesignatedInitializers final public class STPlayer {
  final public var currentList: STPlaylist? {
    get
  }
  @Observable @_projectedValueProperty($currentTrack) final public var currentTrack: STTrack? {
    get
  }
  final public var $currentTrack: Observable<STTrack?> {
    get
  }
  final public var currentTrackAudioQuality: STAudioQuality? {
    get
  }
  @Observable @_projectedValueProperty($currentContent) final public var currentContent: STContent? {
    get
  }
  final public var $currentContent: Observable<STContent?> {
    get
  }
  @Observable @_projectedValueProperty($currentTime) final public var currentTime: Swift.Double? {
    get
  }
  final public var $currentTime: Observable<Swift.Double?> {
    get
  }
  final public var currentState: STPlayerState {
    get
  }
  @Observable @_projectedValueProperty($rate) final public var rate: Swift.Float {
    get
  }
  final public var $rate: Observable<Swift.Float> {
    get
  }
  final public var configuration: STPlayerConfiguration {
    get
  }
  final public var timerRemainingDuration: Foundation.TimeInterval? {
    get
  }
  @objc deinit
}
extension STPlayer {
  final public func resume()
}
extension STPlayer : STObservableProtocol {
  final public func add(observer: STPlayerObserver)
  final public func remove(observer: STPlayerObserver)
  public typealias Observer = STPlayerObserver
}
@_hasMissingDesignatedInitializers final public class STWishList : STFeature {
  public static func getInstance() throws -> STWishList
  @Observable @_projectedValueProperty($contents) final public var contents: [STContentWish] {
    get
    set
    _modify
  }
  final public var $contents: Observable<[STContentWish]> {
    get
  }
  @Observable @_projectedValueProperty($tracks) final public var tracks: [STTrackWish] {
    get
    set
    _modify
  }
  final public var $tracks: Observable<[STTrackWish]> {
    get
  }
  final public func add(content: STContentWish)
  final public func add(track: STTrackWish)
  final public func remove(content: STContentWish)
  final public func remove(track: STTrackWish)
  @objc deinit
}
extension STTrackHistoryItemMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<STTrackHistoryItemMO>
}
public enum STPodcastDescriptionIdentityModels {
  public struct Style {
  }
  public struct ContentData {
  }
}
public enum STListLinkedContentType : Swift.String {
  case content
  case track
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol STListProtocol {
  var id: Swift.Int? { get }
  var name: Swift.String? { get set }
  var type: STListType? { get set }
  var imgSrc: Swift.String? { get set }
  var linkedContentType: STListLinkedContentType? { get }
  var numberOfItems: Swift.Int? { get }
  var createdAt: Foundation.Date? { get }
  var updatedAt: Foundation.Date? { get }
  func delete(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func getItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func update(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  func syncItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
}
public struct STList<Item> : STListProtocol {
  public var id: Swift.Int? {
    get
  }
  public var name: Swift.String? {
    get
    set
  }
  public var type: STListType? {
    get
    set
  }
  public var imgSrc: Swift.String? {
    get
    set
  }
  public var linkedContentType: STListLinkedContentType? {
    get
  }
  public var numberOfItems: Swift.Int? {
    get
  }
  public var items: [STListItem<Item>] {
    get
    set
  }
  public var createdAt: Foundation.Date? {
    get
  }
  public var updatedAt: Foundation.Date? {
    get
  }
}
extension STList {
  public func delete(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func getItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func update(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func updateItems(_ items: [STListItem<Item>], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func updateItem(_ item: STListItem<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func addItems(_ items: [STListItem<Item>], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func addItem(_ item: STListItem<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func deleteItems(_ items: [STListItem<Item>], completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func deleteItem(_ item: STListItem<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  public func syncItems(completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
}
extension STList : STObservableProtocol {
  public func add(observer: STListObserver)
  public func remove(observer: STListObserver)
  public typealias Observer = STListObserver
}
public protocol STListObserver : AnyObject {
  func itemsDidChange<Item>(to value: [STListItem<Item>])
}
public struct STContentLightOfflineItem {
  public let audioItem: STContentLight
  public var state: STOfflineState
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct STListItem<Item> {
  public var id: Swift.Int?
  public var key: Swift.String?
  public var item: Item?
  public var order: Swift.Int?
  public var value: Swift.String?
  public var createdAt: Foundation.Date?
  public var updatedAt: Foundation.Date?
}
extension STListItem : Swift.Equatable {
  public static func == (lhs: STListItem<Item>, rhs: STListItem<Item>) -> Swift.Bool
}
extension STListItem {
  public static func defaultOrder(lhs: STListItem<Item>, rhs: STListItem<Item>) -> Swift.Bool
}
extension STListItem where Item == STTrack {
  public init(track: STTrack)
}
extension STListItem where Item == STContentLight {
  public init(contentLight: STContentLight)
}
extension STPlayer {
  public static func getInstance() throws -> STPlayer
  final public func setConfiguration(_ configuration: STPlayerConfiguration)
  final public func setPreferredAudioQuality(_ preferredAudioQuality: STAudioQuality)
  final public func play(playlist: STPlaylist, at index: Swift.Int)
  final public func stop()
  final public func next()
  final public func prev()
  final public func seekTo(time: Swift.Double)
  final public func fastForward()
  final public func rewind()
  final public func setStopTimer(time: Swift.Double)
  final public func setStopAtEndOfTrack()
  final public func removeStopTimer()
  final public func getAudioDuration() -> Swift.Double?
  final public func getAudioCurrentTime() -> Swift.Double?
  final public func isPlaying() -> Swift.Bool
  final public func isPaused() -> Swift.Bool
  final public func isLoading() -> Swift.Bool
}
extension STPlayer {
  final public func openExpand(presenter viewController: UIKit.UIViewController)
  @available(*, deprecated, message: "Use STFloatingChip feature istead")
  @discardableResult
  final public func displayChip(in controller: UIKit.UIViewController) -> UIKit.UIView
  final public func setMiniPlayer(in viewController: UIKit.UIViewController)
  final public func displayMiniPlayer(_ value: Swift.Bool)
}
public struct STContentCachingOptions {
  public var enabledContentCaching: Swift.Bool
  public var maxCachedContent: Swift.Int
  public init(enabledContentCaching: Swift.Bool = false, maxCachedContent: Swift.Int = 0)
}
public struct STSection {
  public let id: Swift.Int
  public let name: Swift.String
  public let type: STSectionType?
  public let linkedContentType: STSectionLinkedContentType?
  public let order: Swift.Int?
  public let highlighted: Swift.Bool?
  public let searchable: Swift.Bool?
  public let numberOfItems: Swift.Int?
  public let imgSrc: Swift.String?
  public let landscapeImgSrc: Swift.String?
  public let linkedContents: [STContentLight]?
  public var linkedElements: [STTrack]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol STTrackingPlayerAdapter : STTrackingAdapter {
  func trackDidStart(track: STTrack)
  func positionDidChange(position: Swift.Double)
  func durationDidChange(duration: Foundation.TimeInterval)
  func percentilePlayed(percentile: Swift.Int)
}
public struct STContentWish {
  public let id: Swift.Int
  public let audioItem: STContent
  public let createdAt: Swift.String?
}
public struct STTrackWish {
  public let id: Swift.Int
  public let audioItem: STTrack
  public let createdAt: Swift.String?
}
public struct STTrackHistoryItem {
  public let audioItem: STTrack
  public var time: Swift.Double
  public var createdAt: Foundation.Date
  public var updatedAt: Foundation.Date
}
extension STTrackHistoryItem {
  public static func updateOrder(lhs: STTrackHistoryItem, rhs: STTrackHistoryItem) -> Swift.Bool
}
@_hasMissingDesignatedInitializers final public class STSections : STFeature {
  public static func getInstance() throws -> STSections
  @objc deinit
}
extension STSections {
  final public func getSections(completion: @escaping (Swift.Result<[STSection], Swift.Error>) -> Swift.Void)
  final public func getSection(by id: Swift.Int, completion: @escaping (Swift.Result<STSection, Swift.Error>) -> Swift.Void)
}
@_hasMissingDesignatedInitializers final public class STOffline : STFeature {
  public static func getInstance() throws -> STOffline
  final public var tracks: [STTrackOfflineItem] {
    get
  }
  final public func add(track: STTrack, completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)? = nil)
  final public func remove(track: STTrack) throws
  @objc deinit
}
extension STOffline : STObservableProtocol {
  final public func add(observer: STOfflineObserver)
  final public func remove(observer: STOfflineObserver)
  public typealias Observer = STOfflineObserver
}
public protocol STOfflineObserver : AnyObject {
  func offlineContentsDidChange(to value: [STContentLightOfflineItem])
  func offlineTracksDidChange(to value: [STTrackOfflineItem])
}
public struct STUIOptions {
  public let brandColor: UIKit.UIColor
  public init(brandColor: UIKit.UIColor = .black)
}
public enum STContentModelType : Swift.String, Swift.Codable {
  case podcast
  case audiobook
  case livestream
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STContentMediaType : Swift.String, Swift.Codable {
  case edito
  case brand
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STContentDiffusionMode : Swift.String, Swift.Codable {
  case episodic
  case serial
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STContentDisponibilityStatus : Swift.String, Swift.Codable {
  case forthcoming
  case available
  case stopped
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias STTrackList = STList<STTrack>
public typealias STContentList = STList<STContentLight>
public typealias STTrackListItem = STListItem<STTrack>
public typealias STContentListItem = STListItem<STContentLight>
@_hasMissingDesignatedInitializers final public class STFloatingChip : STFeature {
  public static func getInstance() throws -> STFloatingChip
  @discardableResult
  final public func display(in viewController: UIKit.UIViewController, with configuration: STFloatingChipConfiguration) -> UIKit.UIView
  @objc deinit
}
public struct STFloatingChipConfiguration {
  public enum Size : CoreGraphics.CGFloat {
    case small
    case medium
    case large
    public typealias RawValue = CoreGraphics.CGFloat
    public init?(rawValue: CoreGraphics.CGFloat)
    public var rawValue: CoreGraphics.CGFloat {
      get
    }
  }
  public enum Position {
    case bottomRight(horizontalMargin: CoreGraphics.CGFloat, verticalMargin: CoreGraphics.CGFloat)
    case bottomLeft(horizontalMargin: CoreGraphics.CGFloat, verticalMargin: CoreGraphics.CGFloat)
  }
  public let size: STFloatingChipConfiguration.Size
  public let position: STFloatingChipConfiguration.Position
  public let animate: Swift.Bool
  public init(size: STFloatingChipConfiguration.Size = .medium, position: STFloatingChipConfiguration.Position = .bottomRight(horizontalMargin: 10, verticalMargin: 10), animate: Swift.Bool = true)
}
public enum STTrackModelType : Swift.String, Swift.Codable {
  case track
  case livetrack
  case chapter
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STTrackTypeOfElement : Swift.String, Swift.Codable {
  case full
  case trailer
  case bonus
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension STMediaMO {
  @objc @NSManaged dynamic public var url: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var size: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var blob: STBlobMO? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(STBlobMO) public class STBlobMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class STHistory : STFeature {
  public static func getInstance() throws -> STHistory
  final public var tracks: [STTrackHistoryItem] {
    get
  }
  final public func trackHistoryItems(for keys: [Swift.String]) -> [STTrackHistoryItem]
  @objc deinit
}
public protocol STHistoryObserver : AnyObject {
  func historyTracksDidChange(to value: [STTrackHistoryItem])
}
extension STHistory : STObservableProtocol {
  final public func add(observer: STHistoryObserver)
  final public func remove(observer: STHistoryObserver)
  public typealias Observer = STHistoryObserver
}
public enum STSectionLinkedContentType : Swift.String, Swift.Codable {
  case content
  case element
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum STSectionType : Swift.String, Swift.Codable {
  case `default`
  case new
  case trailer
  case highlight
  case category
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public protocol STAudioItemInterface : Swift.Equatable {
  var key: Swift.String { get }
}
extension STAudioItemInterface {
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
public struct STContentLight {
  public let key: Swift.String
  public let type: STContentModelType?
  public let title: Swift.String
  public let ean: Swift.String?
  public let imgSrc: Swift.String?
  public let portraitImgSrc: Swift.String?
  public let landscapeImgSrc: Swift.String?
  public let narrator: Swift.String?
  public let author: Swift.String?
  public let publicationDate: Foundation.Date?
  public let overallDuration: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
final public class StayTunedSDK {
  @discardableResult
  public init(appId: Swift.String, authToken: Swift.String, options: STOptions = STOptions()) throws
  public static func getInstance() throws -> StayTunedSDK
  @objc deinit
}
final public class STPlaylist {
  final public var tracks: [STTrack]
  final public var hasNext: Swift.Bool {
    get
  }
  final public var hasPrevious: Swift.Bool {
    get
  }
  public init(tracks: [STTrack])
  convenience public init(content: STContent)
  @discardableResult
  final public func next() -> STTrack?
  @discardableResult
  final public func previous() -> STTrack?
  public init(from decoder: Swift.Decoder) throws
  @objc deinit
  final public func encode(to encoder: Swift.Encoder) throws
}
@propertyWrapper public class Observable<Value> {
  @available(*, deprecated, message: "Observation will be removed in 1.0.5. Please use delegate pattern.")
  public var projectedValue: Observable<Value> {
    get
  }
  @available(*, deprecated, message: "Observation will be removed in 1.0.5. Please use delegate pattern.")
  public var wrappedValue: Value {
    get
    set
  }
  public init(wrappedValue: Value)
  @objc deinit
}
extension Observable {
  @discardableResult
  @available(*, deprecated, message: "Observation will be removed in 1.0.5. Please use delegate pattern.")
  public func observe(with closure: @escaping (Value) -> Swift.Void) -> STObservable.Cancellable
}
public enum STObservable {
  @_hasMissingDesignatedInitializers final public class Cancellable {
    @objc deinit
    final public func cancel()
  }
}
@_hasMissingDesignatedInitializers final public class STAuth : STFeature {
  public static func getInstance() throws -> STAuth
  @objc deinit
}
extension STAuth {
  final public func connect(partnerKey: Swift.String, partnerToken: Swift.String, completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)?)
  final public func refresh(completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)?)
  final public func connectAnonymous(completion: ((Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)?)
}
@_inheritsConvenienceInitializers @objc(STMediaMO) public class STMediaMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum STOfflineState : Swift.Equatable, Swift.Codable {
  case notDownloaded
  case queued
  case downloading(Swift.Float)
  case downloaded
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (a: STOfflineState, b: STOfflineState) -> Swift.Bool
}
public protocol STUIFeatureInterface {
  func launchUI()
}
@_inheritsConvenienceInitializers @objc(STTrackHistoryItemMO) public class STTrackHistoryItemMO : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
#warning("TODO: STTrackingNavigationAdapter")
@_hasMissingDesignatedInitializers final public class STLists : STFeature {
  public static func getInstance() throws -> STLists
  final public func getLists(completion: @escaping (Swift.Result<[STListProtocol], Swift.Error>) -> Swift.Void)
  final public func create<Item>(name: Swift.String, type: STListType, completion: @escaping (Swift.Result<STList<Item>, Swift.Error>) -> Swift.Void)
  final public func getList<Item>(by id: Swift.Int, completion: @escaping (Swift.Result<STList<Item>, Swift.Error>) -> Swift.Void)
  final public func update<Item>(_ list: STList<Item>, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  final public func delete(listId: Swift.Int, completion: @escaping (Swift.Result<Swift.Void, Swift.Error>) -> Swift.Void)
  final public func updateItems<Item>(listId: Swift.Int, items: [STListItem<Item>], completion: @escaping (Swift.Result<[STListItem<Item>], Swift.Error>) -> Swift.Void)
  final public func addItems<Item>(listId: Swift.Int, items: [STListItem<Item>], completion: @escaping (Swift.Result<[STListItem<Item>], Swift.Error>) -> Swift.Void)
  final public func deleteItems<Item>(listId: Swift.Int, items: [STListItem<Item>], completion: @escaping (Swift.Result<Swift.Int?, Swift.Error>) -> Swift.Void)
  final public func syncItems<Item>(listId: Swift.Int, items: [STListItem<Item>], completion: @escaping (Swift.Result<[STListItem<Item>], Swift.Error>) -> Swift.Void)
  @objc deinit
}
public enum STAudioQuality {
  case normal
  case hd
  public static func == (a: STAudioQuality, b: STAudioQuality) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct STPlayerConfiguration {
  public var isContentCellVisible: Swift.Bool
  public var onContentCellClick: ((UIKit.UINavigationController) -> Swift.Void)?
  public var preferredAudioQuality: STAudioQuality
  public var shouldResumeTrackFromHistory: ((STTrack, STTrackHistoryItem, ((Swift.Bool) -> Swift.Void)) -> Swift.Void)?
  public init(isContentCellVisible: Swift.Bool = true, onContentCellClick: ((UIKit.UINavigationController) -> Swift.Void)? = nil, preferredAudioQuality: STAudioQuality = .normal, shouldResumeTrackFromHistory: ((STTrack, STTrackHistoryItem, ((Swift.Bool) -> Swift.Void)) -> Swift.Void)? = nil)
}
public protocol STFeature {
  static func getInstance() throws -> Self
  static var shared: Self? { get }
}
extension STFeature {
  public static var shared: Self? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class STContents : STFeature {
  public static func getInstance() throws -> STContents
  @objc deinit
}
extension STContents {
  final public func getContent(by key: Swift.String, completion: @escaping (Swift.Result<STContent, Swift.Error>) -> Swift.Void)
  final public func getContents(completion: @escaping (Swift.Result<[STContentLight], Swift.Error>) -> Swift.Void)
}
extension STBlobMO {
  @objc @NSManaged dynamic public var blob: Foundation.Data? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var media: STMediaMO? {
    @objc get
    @objc set
  }
}
public protocol STPlayerObserver : AnyObject {
  func playerCurrentTrackDidChange(to track: STTrack)
  func playerCurrentTrackAudioQualityDidChange(to value: STAudioQuality)
  func playerCurrentContentDidChange(to content: STContent)
  func playerStateDidChange(to value: STPlayerState)
  func playerCurrentTimeDidChange(to value: Swift.Double)
  func playerWillSeek(from beginTime: Swift.Double?)
  func playerDidSeek(to endTime: Swift.Double)
  func playerRateDidChange(to value: Swift.Float)
  func playerTimerDidChange(to value: Foundation.TimeInterval?)
  func playerTrackDidEnd(_ track: STTrack)
  func playerFailed(for track: STTrack)
}
extension STPlayerObserver {
  public func playerCurrentTrackDidChange(to track: STTrack)
  public func playerCurrentTrackAudioQualityDidChange(to value: STAudioQuality)
  public func playerCurrentContentDidChange(to content: STContent)
  public func playerCurrentTimeDidChange(to value: Swift.Double)
  public func playerWillSeek(from beginTime: Swift.Double?)
  public func playerDidSeek(to endTime: Swift.Double)
  public func playerStateDidChange(to value: STPlayerState)
  public func playerRateDidChange(to value: Swift.Float)
  public func playerTimerDidChange(to value: Foundation.TimeInterval?)
  public func playerTrackDidEnd(_ track: STTrack)
  public func playerFailed(for track: STTrack)
}
@_hasMissingDesignatedInitializers final public class STBookmarked : STFeature {
  public static func getInstance() throws -> STBookmarked
  @Observable @_projectedValueProperty($contents) final public var contents: [STContent] {
    get
    set
    _modify
  }
  final public var $contents: Observable<[STContent]> {
    get
  }
  @Observable @_projectedValueProperty($tracks) final public var tracks: [STTrack] {
    get
    set
    _modify
  }
  final public var $tracks: Observable<[STTrack]> {
    get
  }
  final public func add(content: STContent)
  final public func add(track: STTrack)
  final public func remove(content: STContent)
  final public func remove(track: STTrack)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class STLibrary : STFeature {
  public static func getInstance() throws -> STLibrary
  @Observable @_projectedValueProperty($contents) final public var contents: [STContentTransaction] {
    get
    set
    _modify
  }
  final public var $contents: Observable<[STContentTransaction]> {
    get
  }
  @Observable @_projectedValueProperty($tracks) final public var tracks: [STTrackTransaction] {
    get
    set
    _modify
  }
  final public var $tracks: Observable<[STTrackTransaction]> {
    get
  }
  final public func add(content: STContent)
  final public func add(track: STTrack)
  @objc deinit
}
public struct STContent {
  public let key: Swift.String
  public let type: STContentModelType?
  public let title: Swift.String
  public let ean: Swift.String?
  public let imgSrc: Swift.String?
  public let portraitImgSrc: Swift.String?
  public let landscapeImgSrc: Swift.String?
  public let narrator: Swift.String?
  public let author: Swift.String?
  public let authorBibliographicalNote: Swift.String?
  public let publishingHouse: Swift.String?
  public let imprintName: Swift.String?
  public let advertiser: Swift.String?
  public let language: Swift.String?
  public let descriptionText: Swift.String?
  public let mediaType: STContentMediaType?
  public let diffusionMode: STContentDiffusionMode?
  public let disponibilityStatus: STContentDisponibilityStatus?
  public let complete: Swift.Bool?
  #warning("TODO: documentation")
  public let isExplicitContent: Swift.Bool?
  #warning("TODO: documentation, add usage example")
  public let categories: Swift.String?
  public let copyright: Swift.String?
  public let websiteUrl: Swift.String?
  public let rssFeedUrl: Swift.String?
  public let vastUrl: Swift.String?
  public let pdfUrl: Swift.String?
  public let publicationDate: Foundation.Date?
  public let overallDuration: Swift.Int?
  public let elementList: [STTrack]?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class STWeakRef {
  @objc deinit
}
public enum STListType {
  case bookmark, playlist, favorite, queue, custom(Swift.String)
}
extension STListType : Swift.Equatable {
  public static func == (lhs: STListType, rhs: STListType) -> Swift.Bool
}
public enum STKeychainWrapperKeys : Swift.String {
  case refreshToken
  case partnerKey
  case anonymousUsername
  case anonymousPassword
  case anonymousUserKey
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public enum STPlayerState {
  case playing
  case paused
  case loading
  public static func == (a: STPlayerState, b: STPlayerState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct STTrack {
  public let key: Swift.String
  public let contentKey: Swift.String
  public let type: STTrackModelType?
  public let title: Swift.String
  public let subtitle: Swift.String?
  public let episode: Swift.Int?
  public let season: Swift.Int?
  public let elementNumber: Swift.Int?
  public let chapter: Swift.Int?
  public let chapterPart: Swift.Int?
  public let websiteUrl: Swift.String?
  public let typeOfElement: STTrackTypeOfElement?
  public let publicationDate: Foundation.Date?
  public let highlighted: Swift.Bool?
  public let descriptionText: Swift.String?
  public var imgSrc: Swift.String?
  public let audioSrc: Swift.String?
  public let audioSrcWeight: Swift.Int?
  public let hdAudioSrc: Swift.String?
  public let hdAudioSrcWeight: Swift.Int?
  public let audioDuration: Swift.Int?
  public let createdAt: Foundation.Date?
  public let updatedAt: Foundation.Date?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum STError : Swift.Error {
  case notInitException
  case alreadyInitException
  case featureNotAvailable
  case missingRefreshTokenInKeychain
  case missingAnonymousCredentialsInKeychain
  case unknowned
  public static func == (a: STError, b: STError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol STObservableProtocol {
  associatedtype Observer
  func add(observer: Self.Observer)
  func remove(observer: Self.Observer)
}
public struct STTrackOfflineItem {
  public let audioItem: STTrack
  public var state: STOfflineState
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension STTrack : Swift.Encodable {}
extension STTrack : Swift.Decodable {}
extension STTrack : STAudioItemInterface {}
extension STTrackOfflineItem : Swift.Encodable {}
extension STTrackOfflineItem : Swift.Decodable {}
extension STContentLight : Swift.Encodable {}
extension STContentLight : Swift.Decodable {}
extension STContentLight : STAudioItemInterface {}
extension STPlayer : STFeature {}
extension STSectionType : Swift.Equatable {}
extension STSectionType : Swift.Hashable {}
extension STSectionType : Swift.RawRepresentable {}
extension STListLinkedContentType : Swift.Equatable {}
extension STListLinkedContentType : Swift.Hashable {}
extension STListLinkedContentType : Swift.RawRepresentable {}
extension STContentLightOfflineItem : Swift.Encodable {}
extension STContentLightOfflineItem : Swift.Decodable {}
extension STSection : Swift.Encodable {}
extension STSection : Swift.Decodable {}
extension STContentModelType : Swift.Equatable {}
extension STContentModelType : Swift.Hashable {}
extension STContentModelType : Swift.RawRepresentable {}
extension STContentMediaType : Swift.Equatable {}
extension STContentMediaType : Swift.Hashable {}
extension STContentMediaType : Swift.RawRepresentable {}
extension STContentDiffusionMode : Swift.Equatable {}
extension STContentDiffusionMode : Swift.Hashable {}
extension STContentDiffusionMode : Swift.RawRepresentable {}
extension STContentDisponibilityStatus : Swift.Equatable {}
extension STContentDisponibilityStatus : Swift.Hashable {}
extension STContentDisponibilityStatus : Swift.RawRepresentable {}
extension STFloatingChipConfiguration.Size : Swift.Equatable {}
extension STFloatingChipConfiguration.Size : Swift.Hashable {}
extension STFloatingChipConfiguration.Size : Swift.RawRepresentable {}
extension STTrackModelType : Swift.Equatable {}
extension STTrackModelType : Swift.Hashable {}
extension STTrackModelType : Swift.RawRepresentable {}
extension STTrackTypeOfElement : Swift.Equatable {}
extension STTrackTypeOfElement : Swift.Hashable {}
extension STTrackTypeOfElement : Swift.RawRepresentable {}
extension STSectionLinkedContentType : Swift.Equatable {}
extension STSectionLinkedContentType : Swift.Hashable {}
extension STSectionLinkedContentType : Swift.RawRepresentable {}
extension STPlaylist : Swift.Encodable {}
extension STPlaylist : Swift.Decodable {}
extension STContent : Swift.Encodable {}
extension STContent : Swift.Decodable {}
extension STContent : STAudioItemInterface {}
extension STAudioQuality : Swift.Equatable {}
extension STAudioQuality : Swift.Hashable {}
extension STKeychainWrapperKeys : Swift.Equatable {}
extension STKeychainWrapperKeys : Swift.Hashable {}
extension STKeychainWrapperKeys : Swift.RawRepresentable {}
extension STPlayerState : Swift.Equatable {}
extension STPlayerState : Swift.Hashable {}
extension STError : Swift.Equatable {}
extension STError : Swift.Hashable {}
